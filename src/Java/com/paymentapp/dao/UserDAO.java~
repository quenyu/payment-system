package Java.com.paymentapp.dao;

import Java.com.paymentapp.entity.User.PreferredLanguage;
import Java.com.paymentapp.entity.User.UserEntity;
import Java.com.paymentapp.entity.User.UserRole;
import Java.com.paymentapp.util.DBConnection;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;
import lombok.SneakyThrows;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static lombok.AccessLevel.*;

@NoArgsConstructor(access = PRIVATE)
public class UserDAO implements DAO<Integer, UserEntity> {
    private static final UserDAO INSTANCE = new UserDAO();

    private static final String FIND_BY_ID_SQL = """
            SELECT id, email, image, password_hash, first_name, last_name, role, preferred_language, created_at
            FROM users
            WHERE id = ?
            """;

    private static final String SAVE_SQL = """
            INSERT INTO users (email, image, password_hash, first_name, last_name, role, preferred_language)
            VALUES (?, ?, ?, ?, ?, ?, ?)
            """;

    private static final String DELETE_BY_ID_SQL = """
            DELETE FROM users
            WHERE id = ?
            """;

    private static final String UPDATE_BY_ID_SQL = """
            UPDATE users
            SET email = ?,
                image = ?,
                password_hash = ?,
                first_name = ?,
                last_name = ?,
                role = ?,
                preferred_language = ?
            WHERE id = ?
            """;

    private static final String FIND_ALL_SQL = """
            SELECT id, email, image, password_hash, first_name, last_name, role, preferred_language, created_at
            FROM users
            """;

    private static final String EXISTS_BY_EMAIL_SQL = "SELECT EXISTS(SELECT 1 FROM users WHERE email = ?)";

    private static final String FIND_BY_EMAIL_SQL = "SELECT id, email, image, password_hash, first_name, last_name, role, preferred_language, created_at FROM users WHERE email = ?";

    @SneakyThrows
    public Optional<UserEntity> findByEmail(String email) {
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement ps = connection.prepareStatement(FIND_BY_EMAIL_SQL)) {

            ps.setString(1, email);
            ResultSet rs = ps.executeQuery();
            UserEntity user = null;
            if (rs.next()) {
                user = buildUser(rs);
            }

            return Optional.ofNullable(user);
        }
    }
    
    @SneakyThrows
    public boolean existsByEmail(String email) {
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement ps = connection.prepareStatement(EXISTS_BY_EMAIL_SQL)) {

            ps.setObject(1, email);
            try (ResultSet rs = ps.executeQuery()) {
                return rs.next() && rs.getBoolean(1);
            }
        }
    }

    @SneakyThrows
    public boolean existsById(String email) {
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement ps = connection.prepareStatement(EXISTS_BY_EMAIL_SQL)) {

            ps.setObject(1, email);
            try (ResultSet rs = ps.executeQuery()) {
                return rs.next() && rs.getBoolean(1);
            }
        }
    }


    @Override
    @SneakyThrows
    public Optional<UserEntity> findById(Integer id) {
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(FIND_BY_ID_SQL)
        ) {
            ps.setObject(1, id);

            ResultSet rs = ps.executeQuery();
            UserEntity user = null;

            if (rs.next()) {
                user = buildUser(rs);
            }

            return Optional.ofNullable(user);
        }
    }

    @Override
    @SneakyThrows
    public UserEntity save(UserEntity user) {
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(SAVE_SQL, PreparedStatement.RETURN_GENERATED_KEYS)) {
            ps.setObject(1, user.getEmail());
            ps.setObject(2, user.getImage());
            ps.setObject(3, user.getPasswordHash());
            ps.setObject(4, user.getFirstName());
            ps.setObject(5, user.getLastName());
            ps.setObject(6, user.getRole().name());
            ps.setObject(7, user.getPreferredLanguage().name());
            ps.executeUpdate();

            ResultSet generatedKeys = ps.getGeneratedKeys();
            generatedKeys.next();
            user.setId(generatedKeys.getObject("id", Integer.class));

            return user;
        }
    }

    @Override
    @SneakyThrows
    public UserEntity update(UserEntity entity) {
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(UPDATE_BY_ID_SQL)) {
            ps.setObject(1, entity.getEmail());
            ps.setObject(2, entity.getImage());
            ps.setObject(3, entity.getPasswordHash());
            ps.setObject(4, entity.getFirstName());
            ps.setObject(5, entity.getLastName());
            ps.setObject(6, entity.getRole().name());
            ps.setObject(7, entity.getPreferredLanguage().name());

            ps.setObject(8, entity.getId());
            int affectedRows = ps.executeUpdate();

            return affectedRows > 0 ? entity : null;
        }
    }

    @Override
    @SneakyThrows
    public boolean deleteById(Integer id) {
        try (Connection conn = DBConnection.getConnection();
                PreparedStatement ps = conn.prepareStatement(DELETE_BY_ID_SQL)) {
            ps.setObject(1, id);

            return ps.executeUpdate() > 0;
        }
    }

    @Override
    @SneakyThrows
    public List<UserEntity> findAll() {
        List<UserEntity> users = new ArrayList<>();
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(FIND_ALL_SQL)) {

            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                users.add(buildUser(rs));
            }
        }
        return users;
    }

    @SneakyThrows
    private static UserEntity buildUser(ResultSet rs) {
        return new UserEntity(
                rs.getObject("id", Integer.class),
                rs.getObject("email", String.class),
                rs.getObject("image", String.class),
                rs.getObject("password_hash", String.class),
                rs.getObject("first_name", String.class),
                rs.getObject("last_name", String.class),
                UserRole.valueOf(rs.getObject("role", String.class)),
                PreferredLanguage.valueOf(rs.getObject("preferred_language", String.class)),
                rs.getObject("created_at", Timestamp.class)
        );
    }

    public static UserDAO getInstance() {
        return INSTANCE;
    }
}
