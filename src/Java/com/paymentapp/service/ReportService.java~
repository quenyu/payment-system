package Java.com.paymentapp.service;

import Java.com.paymentapp.dao.AccountDAO;
import Java.com.paymentapp.dao.CreditCardDAO;
import Java.com.paymentapp.dao.UserDAO;
import Java.com.paymentapp.entity.Account.AccountEntity;
import Java.com.paymentapp.entity.User.UserEntity;
import lombok.RequiredArgsConstructor;
import lombok.SneakyThrows;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.pdfbox.pdmodel.font.Standard14Fonts;

import java.io.OutputStream;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.stream.Collectors;

@RequiredArgsConstructor
public class ReportService {
    private final UserDAO userDao;
    private final AccountDAO accountDao;

    @SneakyThrows
    public void generateUserReport(int userId, OutputStream outputStream) {
        try (PDDocument document = new PDDocument()) {
            PDPage page = new PDPage(PDRectangle.A4);
            document.addPage(page);

            try (PDPageContentStream contentStream = new PDPageContentStream(document, page)) {
                // Установка шрифтов
                Standard14Fonts.FontName fontBold = Standard14Fonts.FontName.HELVETICA;
                PDFont fontRegular = PDType1Font.HELVETICA;

                // Заголовок
                contentStream.setFont(fontBold, 14);
                contentStream.beginText();
                contentStream.newLineAtOffset(100, 750);
                contentStream.showText("User Report");
                contentStream.endText();

                // Основная информация
                UserEntity user = userDao.findById(userId).orElseThrow();
                addSection(contentStream, "User Information", List.of(
                        "Name: " + user.getFirstName() + " " + user.getLastName(),
                        "Email: " + user.getEmail(),
                        "Registered: " + user.getCreatedAt().toLocalDateTime().format(DateTimeFormatter.ISO_DATE)
                ), 700, fontRegular, 12);

                // Счета
                List<AccountEntity> accounts = accountDao.findByUserId(userId);
                addSection(contentStream, "Accounts (" + accounts.size() + ")",
                        accounts.stream()
                                .map(acc -> String.format("%s - %.2f (%s)",
                                        acc.getAccountNumber(),
                                        acc.getBalance(),
                                        acc.getStatus()))
                                .collect(Collectors.toList()),
                        600, fontRegular, 12);
            }

            document.save(outputStream);
        }
    }

    @SneakyThrows
    private void addSection(PDPageContentStream contentStream,
                            String title,
                            List<String> lines,
                            float startY,
                            PDFont font,
                            float fontSize) {
        // Заголовок секции
        contentStream.setFont(PDType1Font.HELVETICA_BOLD, fontSize);
        contentStream.beginText();
        contentStream.newLineAtOffset(100, startY);
        contentStream.showText(title);
        contentStream.endText();

        // Содержимое
        contentStream.setFont(font, fontSize - 2);
        float currentY = startY - 20;
        for (String line : lines) {
            contentStream.beginText();
            contentStream.newLineAtOffset(120, currentY);
            contentStream.showText(line);
            contentStream.endText();
            currentY -= 15;
        }
    }
}